@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

class DirectoryAreas {
-LOGGER: Logger
+DirectoryAreas()
+ {static} rootArea : Area
- {static} allDoors : Door[]
+ {static} makeAreas()
+ {static} findDoorById(id : String) : Door
+ {static} getAllDoors() : Door[]
+ {static} getRootArea() : Partition
}

DirectoryAreas --> "*" Door : "allDoors"
DirectoryAreas --> "1" Area : "rootArea"

class DirectoryUsersGroup {
+DirectoryUsersGroup()
-LOGGER: Logger
- {static} userGroups : ArrayList<UserGroup>
+ {static} makeUserGroup()
+ {static} findUserByCredential(credential : String) : User
}

Door --> "1" DoorStates : "state"
DirectoryUsersGroup o--> "1..*" UserGroup : "userGroup"
UserGroup --> "*" Area : "areas"
UserGroup *--> "*" User : "users"

class Door {
- id : String
- closed : boolean
- state : DoorState
- from : Space
- to : Space
+ Door(id : String)
+ processRequest(request : RequestReader)
+ setState(doorState : DoorState)
+ toJson() : JSONObject
+ toString() : String
+ isClosed() : boolean
+ setClosed(b : boolean)
+ getId() : String
+ getFromSpace : Space
+ getToSpace : Space
+ getStateName() : String
- doAction(action : String)
+acceptVisitor(visitor: Visitor)
}


package DoorStates{
abstract DoorState{
#door : Door
#name : String
+ DoorState(door : Door)
+ getName() : String
- {abstract} open()
- {abstract} close()
- {abstract} lock()
- {abstract} unlock()
}

DoorState <|-- Unlocked
DoorState <|-- Locked
DoorState <|-- UnlockedShortly
DoorState <|-- Propped

class Unlocked {
-LOGGER: Logger
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ Unlocked (door : Door)
}

class Locked {
-LOGGER: Logger
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlockShortly()
+ Locked (door : Door)
}

class UnlockedShortly {
-LOGGER: Logger
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ UnlockedShortly (door : Door)
}

class Propped {
-LOGGER: Logger
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ Propped (door : Door)
}

class States{
{static}+LOCKED : String
{static}+UNLOCKED : String
{static}+UNLOCKED_SHORTLY : String
{static}+PROPPED : String
}

class Actions{
{static}+LOCK : String
{static}+UNLOCK : String
{static}+UNLOCK_SHORTLY : String
{static}+OPEN : String
{static}+CLOSE : String
}

}
class User {
- name : String
- credential : String
- group : UserGroup
+ User(name: String, credential: String)
+ toString() : String
+ setGroup()
+ canSendRequests : boolean
+ canBeInSpace : boolean
+ canDoAction : boolean
}

abstract Area{
-id :String
-{static} rootArea : Partition
+getId()
+addChild()
+ Area (id : String, root : Partition)
}

class Clock{
-date : LocalDateTime
-timer : Timer
-LOGGER: Logger
-period : int
-singleInstance: Clock
+Clock (period : int)
+start()
+stop()
+getPeriod()
+getDate (date : LocalDateTime)
+Clock(period : int)
-getInstance(): Clock
}

Area --> "*" Partition
Area --> "*" Space
class Partition{
-children : ArrayList<Area>
+Partition(id : String, root : Area, doors : ArrayList<Door>)
+addChild(child: Area)
+getChild(): ArrayList<Area>
+acceptVisitor(visitor: Visitor)
}

class Space{
-doors : ArrayList<Door>
+Space(id : String, root : Area, doors : ArrayList<Door>
+getDoorsGivingAccess() : ArrayList<Door>
+acceptVisitor(visitor: Visitor)
+addDoor(door : Door)
}

class Schedule{
-fromDate : LocalDate
-toDate : LocalDate
-fromHour : LocalTime
-toHour : LocalTime
-weekdays : ArrayList<String>
+Schedule(dateInterval : ArrayList<String>,weekdays : ArrayList<String>,
timeInterval : ArrayList<String>)
+isInSchedule(now : LocalDateTime) : boolean
}

class UserGroup{
-name : String
-users : ArrayList<User>
-actions : ArrayList<String>
-permittedSpaces : ArrayList<Space>
-schedule : Schedule
+getName() : String
+getUsers() : ArrayList<User>
+getActions() : ArrayList<String>
+getPermittedSpace() : ArrayList<Area>
+getSchedule() : Schedule
+UserGroup(name : String, users : ArrayList<User>, actions : ArrayList<String>,
permittedSpaces : ArrayList<String>, schedule : Schedule)
}

Door "1"-->"1" Space : from
Door "1"-->"1" Space : to
Space *-->"1" Door : doors
Partition --> "*" Area
UserGroup *--> "1" Schedule
class Main {
+ {static} main(args : String)
}

interface Visitor {
+visitSpace(space: Space)
+visitPartition(partition: Partition)
+visitDoor(door : Door)
}

class VisitorFindAreaById{
-result: Area
-id : String
-LOGGER: Logger
+VisitorFindAreaById(rootArea: Area, idLocal: String)
+getResult(): Area
+visitPartition(partition: Partition)
+visitSpace(space: Space)
+visitDoor(door : Door)
}

class VisitorFindDoorsGivingAccess{
-LOGGER: Logger
-result: ArrayList<Door>
+VisitorFindDoorsGivingAccess(area: Area)
+getResult(): Area
+visitPartition(partition: Partition)
+visitSpace(space: Space)
+visitDoor(door : Door)
}

class VisitorGetSpaces{
-LOGGER: Logger
-result: ArrayList<Space>
+VisitorGetSpaces(area: Area)
+getResult(): Area
+visitPartition(partition: Partition)
+visitSpace(space: Space)
+visitDoor(door : Door)
}

Visitor <|-- VisitorFindAreaById
Visitor <|-- VisitorFindDoorsGivingAccess
Visitor <|-- VisitorGetSpaces
UserGroup --> Visitor

note right of Main::main
DirectoryDoors.makeDoors()
DiretoryUsers.makeUsers()
new Webserver()
end note

Main -[hidden]down- Webserver

@enduml
