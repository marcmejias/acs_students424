@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

class DirectoryAreas {
- {static} rootArea : Area
- {static} allDoors : Door[]
+ {static} makeAreas()
+ {static} findAreaById(id : String) : Area
+ {static} findDoorById(id : String) : Door
+ {static} getAllDoors() : Door[]
}

DirectoryAreas --> "*" Door : "allDoors"
DirectoryAreas --> "1" Area : "rootArea"

class DirectoryUsersGroup {
- {static} users : User[]
+ {static} makeUserGroups()
+ {static} findUserByCredential(credential : String) : User
}

Door --> "1" DoorStates : "state"
DirectoryUsersGroup o--> "1..*" UserGroup : "userGroup"
UserGroup --> "*" Area : "areas"
UserGroup *--> "*" User : "users"

class Door {
- id : String
- closed : boolean
+ Door(id : String)
+ processRequest(request : RequestReader)
+ setState(doorState : DoorState)
+ toJson() : JSONObject
'+ toString() : String
'+ isClosed() :boolean
'+ setClosed(b : boolean)
'+ getStateName() : String
- doAction(action : String)
}

package DoorStates{
abstract DoorState{
#door : Door
#name : String
+ DoorState(door : Door)
- {abstract} open()
- {abstract} close()
- {abstract} lock()
- {abstract} unlock()
}

DoorState <|-- Unlocked
DoorState <|-- Locked

class Unlocked {
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
}

class Locked {
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
}
class States{
{static}+LOCKED : String
{static}+UNLOCKED : String
}

class Actions{
{static}+LOCK : String
{static}+UNLOCK : String
{static}+OPEN : String
{static}+CLOSE : String
}

}
class User {
- name : String
- credential : String
+ User(name: String, credential: String)
+ toString() : String
}



abstract Area{
-id :String
-{static}rootArea :Area
-doors : ArrayList<Door>
-children : ArrayList<Area>
+getId()
+addChild()
+{abstract}getDoorsGivingAccess() : Door[]
+{abstract}findAreaById(id : String) : Area
+{abstract}getSpaces() : Space[]
}

class Clock{
-date : LocalDateTime
-timer : Timer
-period : int
+Clock (period : int)
+start()
+stop()
+getPeriod()
+getDate (date : LocalDateTime)
+Clock(period : int)
}

Area --> "*" Partition
Area --> "*" Space
class Partition{
-children : ArrayList<Area>
+Partition(id : String, root : Area, doors : ArrayList<Door>)
+findAreaById(id : String) : Area
+getSpaces() : ArrayList<Space>
}

class Space{
+Space(id : String, root : Area, doors : ArrayList<Door>
+findAreaById(id : String) : Space
+getSpaces() : ArrayList<Space>
}
class Schedule{
-fromDate : LocalDate
-toDate : LocalDate
-fromHour : LocalTime
-toHour : LocalTime
-weekdays : ArrayList<String>
+Schedule(dateInterval : ArrayList<String>,weekdays : ArrayList<String>,
timeInterval : ArrayList<String>)
+isInSchedule(now : LocalDateTime) : boolean
}



class UserGroup{
-name : String
-users : ArrayList<User>
-actions : ArrayList<String>
-permittedSpaces : ArrayList<Space>
-schedule : Schedule
+getName()
+getUsers()
+getActions()
+getPermittedSpace()
+getSchedule()
+UserGroup(name : String, users : ArrayList<User>, actions : ArrayList<String>,
permittedSpaces : ArrayList<String>, schedule : Schedule)
}

class Main {
+ {static} main(args : String)
}

note right of Main::main
DirectoryDoors.makeDoors()
DiretoryUsers.makeUsers()
new Webserver()
end note

Main -[hidden]down- Webserver

@enduml
